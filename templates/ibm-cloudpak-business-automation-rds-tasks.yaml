AWSTemplateFormatVersion: '2010-09-09'
Description: Template for an IBM Cloud Pak for Business Automation deployment with existing VPC. **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1pek09fje)
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for RDS Tasks"
    Order: "2"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: RDS Parameters
        Parameters:
          - VPCID
          - NumberOfAZs
          - VPCPeering
          - VPCPeeringCidrBlock
          - PublicSubnetRouteTable
          - PrivateSubnet1ARouteTableId
          - PrivateSubnet2ARouteTableId
          - PrivateSubnet3ARouteTableId 

    ParameterLabels:
      VPCID:
        default: VPC ID [required]
      NumberOfAZs:
        default: Number of Availability Zones [required]  
      PublicSubnetRouteTable:
        default: Public Subnet route table id
      VPCPeering:
        default: Select the VPC where the database is located to peer.
      VPCPeeringCidrBlock:
        default: Enter the RDS private subnet cidr block to update route table after peering VPCs
      PrivateSubnet1ARouteTableId:
        default: Enter the Private Subnet 1 availability zone Route Table Id.
      PrivateSubnet2ARouteTableId:
        default: Enter the Private Subnet 2 availability zone Route Table Id.
      PrivateSubnet3ARouteTableId:
        default: Enter the Private Subnet 3 availability zone Route Table Id.

Parameters:
  NumberOfAZs:
    Description: >-
      The number of Availability Zones to be used for the deployment. Keep in mind that some regions may be limited to 2 Availability Zones.  For a single ICPD cluster to be highly available, 3 Availability Zones are needed to avoid a single point of failure when using 3, 5 or 7 master nodes.  With less than 3 Availability Zones, one of the AZs will have more master nodes.
    Type: Number
    Default: 3
    AllowedValues:
      - 3
      - 1

  PublicSubnetRouteTable:
    Type: String
    Description: Enter the route table id for the public subnet

  PrivateSubnet1ARouteTableId:
    Type: String
    Description: Enter the Route Table Id for Availability Zone 1
  PrivateSubnet2ARouteTableId:
    Type: String
    Description: Enter the Route Table Id for Availability Zone 2
  PrivateSubnet3ARouteTableId:
    Type: String
    Description: Enter the Route Table Id for Availability Zone 3
  VPCID:
    Description: The ID of your existing VPC for deployment.
    Type: AWS::EC2::VPC::Id
  VPCPeering:
    Description: The ID of your VPC for peering
    Type: AWS::EC2::VPC::Id
  
  VPCPeeringCidrBlock:
    Description: Enter the RDS VPC private subnet cidr block to update the route table of new VPC
    Type: String

Conditions:
  3AZCondition: !Equals [!Ref NumberOfAZs, 3]
  PeeringCondition: !Not [ !Equals [!Ref  VPCPeering, ''] ]
  PeeringCidr: !Not [ !Equals [!Ref  VPCPeeringCidrBlock, ''] ]
  PeeringCondition&3AZCondition: !And
    - !Condition PeeringCondition
    - !Condition 3AZCondition
    - !Condition PeeringCidr

Resources:

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: PeeringCondition
    Properties:
      VpcId: !Ref 'VPCID'
      PeerVpcId: !Ref 'VPCPeering'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-cp4ba-vpc-peering"

  ## Updating our route table
  ## PublicSubnetRouteTable
  VPCUpdateRequesterPeeringRoutePublicTable:
    Type: AWS::EC2::Route
    Condition: PeeringCondition
    Properties:
      VpcPeeringConnectionId: !GetAtt 'VPCPeeringConnection.Id'
      DestinationCidrBlock: !Ref 'VPCPeeringCidrBlock'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  ## End of Public 

  VPCUpdateRequesterPeeringRouteTable1A:
    Type: AWS::EC2::Route
    Condition: PeeringCondition
    Properties:
      VpcPeeringConnectionId: !GetAtt 'VPCPeeringConnection.Id'
      DestinationCidrBlock: !Ref 'VPCPeeringCidrBlock'
      RouteTableId: !Ref 'PrivateSubnet1ARouteTableId'

  VPCUpdateRequesterPeeringRouteTable2A:
    Type: AWS::EC2::Route
    Condition: PeeringCondition&3AZCondition
    Properties:
      VpcPeeringConnectionId: !GetAtt 'VPCPeeringConnection.Id'
      DestinationCidrBlock: !Ref 'VPCPeeringCidrBlock' 
      RouteTableId: !Ref 'PrivateSubnet2ARouteTableId'

  VPCUpdateRequesterPeeringRouteTable3A:
    Type: AWS::EC2::Route
    Condition: PeeringCondition&3AZCondition
    Properties:
      VpcPeeringConnectionId: !GetAtt 'VPCPeeringConnection.Id'
      DestinationCidrBlock: !Ref 'VPCPeeringCidrBlock' 
      RouteTableId: !Ref 'PrivateSubnet3ARouteTableId'

Outputs:

  VpcPeeringId:
    Condition: PeeringCondition
    Description: The VPC Peering id.
    Value: !GetAtt 'VPCPeeringConnection.Id'
    Export:
      Name:
        'Fn::Sub': "${AWS::StackName}-vpc-peering-id"