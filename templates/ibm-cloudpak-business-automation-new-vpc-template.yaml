AWSTemplateFormatVersion: '2010-09-09'
Description: 'Root template for an IBM Cloud Pak for Business Automation deployment. This is the root template for a collection of nested stacks that make up the full CloudPak for Business Automation deployment. **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1rddjo02q)'
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for deploying into a new VPC"
    Order: "1"
  AWS::CloudFormation::Interface:
    ParameterGroups:
     # vpc parameters
      - Label:
          default: VPC network configuration
        Parameters:
          - NumberOfAZs
          - AvailabilityZones
          - VPCCIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - BootNodeAccessCIDR
          - ClusterNetworkCIDR
      - Label:
          default: DNS configuration
        Parameters:
          - DomainName
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
      - Label:
          default: OpenShift hosts configuration
        Parameters:
          - NumberOfMaster
          - NumberOfCompute
          - MasterInstanceType
          - ComputeInstanceType
          - ClusterName
          - EnableFips
          - PrivateCluster
          - OpenshiftVersion
          - OpenshiftUsername
          - OpenshiftPassword
      - Label:
          default: Storage Configuration
        Parameters:
          - OCSInstanceType
      - Label:
          default: Red Hat subscription information
        Parameters:
          - RedhatPullSecret
     # CP4BA parameters
      - Label:
          default: IBM Cloud Pak for Business Automation configuration
        Parameters:
          - LicenseAgreement
          - APIKey
          - ICPDDeploymentLogsBucketName
      - Label:
          default: Shared configuration for all of the Cloud Pak for Business Automation capabilities.
        Parameters:
          - SCDriversUrl
          - SCDeploymentProfileSize
          - SCFncmLicense
          - SCBawLicense
          - SCCP4BALicense
          - SCDBServerPropertyFile
          - VPCPeering
          - VPCPeeringRouteTable
          - VPCPeeringCidrBlock
          - DBPort
          - DBSecuritGroup
      - Label:
          default: Capabilities
        Parameters:
          - Patterns
          - ContentOptionalComponents
          - ODMOptionalComponents
          - BAWAuthoringOptionalComponents
          - BAWRuntimeOptionalComponents

      - Label:
          default: Directory Services Server Configuration
        Parameters:
          - LdapConfigurationPropertyFile

      - Label:
          default: FileNet Content Manager (FNCM)
        Parameters:
          - FNCMConfigurationPropertyFile
          - FNCMDBNameAndUserPropertyFile
      - Label:
          default: Operational Decisions Manager (ODM)
        Parameters:
          - ODMConfigurationPropertyFile
          - ODMDBNameAndUserPropertyFile
      - Label:
          default: Business Automation Workflow (BAW)
        Parameters:
          - BAWConfigurationPropertyFile
          - BAWDBNameAndUserPropertyFile


    ParameterLabels:
     # VPC labels
      KeyPairName:
        default: Key pair name [required]
      PrivateSubnet1CIDR:
        default: Private subnet 1 CIDR [required]
      PrivateSubnet2CIDR:
        default: Private subnet 2 CIDR [required]
      PrivateSubnet3CIDR:
        default: Private subnet 3 CIDR [required]
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR [required]
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR [required]
      PublicSubnet3CIDR:
        default: Public subnet 3 CIDR [required]
      BootNodeAccessCIDR:
        default: Boot node external access CIDR [required]
      ClusterNetworkCIDR:
        default: Cluster network CIDR [required]
      VPCCIDR:
        default: VPC CIDR [required]
      RedhatPullSecret:
        default: Red Hat pull secret [required]
      MasterInstanceType:
        default: Master instance type [required]
      ComputeInstanceType:
        default: Compute instance type [required]
      OCSInstanceType:
        default: ODF instance type [required]
      NumberOfMaster:
        default: Number of master nodes [required]
      NumberOfCompute:
        default: Number of compute nodes [required]
      ICPDDeploymentLogsBucketName:
        default: Output S3 bucket name [required]
      DomainName:
        default: Domain name [required]
      NumberOfAZs:
        default: Number of Availability Zones [required]
      AvailabilityZones:
        default: Availability Zones [required]
      ClusterName:
        default: Cluster name [required]
      # StorageType:
       # default: Cluster storage type
      EnableFips:
        default: Enable FIPS for Openshift
      OpenshiftVersion:
        default: Choose Openshift Version [required]
      OpenshiftUsername:
        default: Choose username to login to Openshift console [required]
      OpenshiftPassword:
        default: Choose password to be used to login to Openshift and Cloud Pak for Business Automation Console [required]
      PrivateCluster:
        default: Disable external endpoints of your cluster  [required]

      LicenseAgreement:
        default: IBM Cloud Pak for Business Automation License Agreement

      APIKey:
        default: IBM Cloud Pak for Business Automation entitlement key [required]

      # CP4BA Parameters
      Patterns:
        default: Select Capability [required]
      ContentOptionalComponents:
        default: Select FileNet Content Managner optional components to be installed
      ODMOptionalComponents:
        default: Select Operational Decisions Manager optional components to be installed
      BAWAuthoringOptionalComponents:
        default: Select Business Automation Workflow Authoring Optional components to be installed
      BAWRuntimeOptionalComponents:
        default: Select Business Automation Workflow Runtime Optional components to be installed



      SCDriversUrl:
        default: JDBC and ICCSAP Driver URL
      SCDeploymentProfileSize:
        default: Profile Size
      SCFncmLicense:
        default: Purchased FileNet Content Manager License
      SCBawLicense:
        default: Purchased Business Automation Workflow License
      SCCP4BALicense:
        default: Purchased Cloud Pak for Business Automation License [required]

      SCDBServerPropertyFile:
        default: Database Server Configuration

      VPCPeering:
        default: Select the VPC where the database server is located to peer.
      VPCPeeringRouteTable:
        default: Enter all VPC route table IDs that is associated with the database server and active directory for VPC peering.
      VPCPeeringCidrBlock:
        default: Enter the VPC IPv4 CIDR for VPC peering.
      DBPort:
        default: Enter the database server port number to connect
      DBSecuritGroup:
        default: Enter the default security group of your database server

      LdapConfigurationPropertyFile:
        default: Directory Service Server Configuration

      FNCMConfigurationPropertyFile:
        default: FileNet Content Management Configuration
      FNCMDBNameAndUserPropertyFile:
        default: FileNet Content Manager database property file

      ODMConfigurationPropertyFile:
        default: Operational Decisions Manager Configuration
      ODMDBNameAndUserPropertyFile:
        default: Operational Decisions Manager database property file

      BAWConfigurationPropertyFile:
        default: Business Automation Workflow Configuration
      BAWDBNameAndUserPropertyFile:
        default: Business Automation Workflow database property file


Parameters:
  LicenseAgreement:
    Description: >-
      Accept the product license for Cloud Pak for Business Automation License after reading it at https://ibm.biz/cp4ba_hyperscaler_license_2301 (OR)
      Accept the license for Cloud Pak for Business Automation Reserved License after reading it at https://ibm.biz/cp4ba-reserved-license-2301
    Type: String
    Default: '-'
    AllowedValues:
      - Accept
      - '-'

  APIKey:
    Description: >-
       The IBM Cloud Pak for Business Automation entitlement key to access IBM Container Registry.
    Type: String
    NoEcho: 'true'

  NumberOfAZs:
    Description: >-
      The number of Availability Zones to be used for the deployment. Keep in mind that some regions may be limited to 2 Availability Zones. For a single IBM Cloud Pak for Business Automation cluster to be highly available, a minimum of 3 Availability Zones are needed to avoid a single point of failure when using 3, 5 or 7 master nodes.
    Type: Number
    Default: 3
    AllowedValues:
      - 3
  AvailabilityZones:
    Description: The list of Availability Zones to use for the subnets in the VPC. The Template uses one or three Availability Zones and preserves the logical order you specify.
    Type: List<AWS::EC2::AvailabilityZone::Name>

  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you
      to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName

  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: The CIDR block for the private subnet located in Availability Zone 1.
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: The CIDR block for the private subnet located in Availability Zone 2.
    Type: String
  PrivateSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.64.0/19
    Description: The CIDR block for the private subnet located in Availability Zone 3.
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: The CIDR block for the public subnet located in Availability Zone 1.
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: The CIDR block for the public subnet located in Availability Zone 2.
    Type: String
  PublicSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/20
    Description: The CIDR block for the public subnet located in Availability Zone 3.
    Type: String
  BootNodeAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access boot node instance. We recommend that you set this value to a trusted IP range. The value `0.0.0.0/0` permits all IP addresses to access. Additional values can be added post-deployment from the Amazon EC2 console.
    Type: String
  ClusterNetworkCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The Cluster Network CIDR IP range that is used as IP address pools for pods.
    Type: String
    Default: 10.128.0.0/14
  RedhatPullSecret:
    Description: S3 path of OpenShift Installer Provisioned Infrastructure pull secret(e.g., s3://my-bucket/path/to/pull-secret).
    Type: String


  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: When deploying to a new VPC, this CIDR block cannot conflict or overlap with the existing VPC where the database service and directory service reside.  A VPC peering will be created between the two VPCs.
    Type: String
  MasterInstanceType:
    Default: m4.2xlarge
    AllowedValues:
      - m4.xlarge
      - m4.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift master instances.
    Type: String
  OCSInstanceType:
    Default: m5.4xlarge
    AllowedValues:
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - c5.8xlarge
      - c5.12xlarge
      - c5.9xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift Data Foundation instances.
    Type: String
  ComputeInstanceType:
    Default: m5.4xlarge
    AllowedValues:
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.24xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - r5.4xlarge
      - r5.9xlarge
      - r5.12xlarge
      - r5.18xlarge
      - r5.24xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift compute instances.
    Type: String
  NumberOfMaster:
    Default: '3'
    Description: The desired capacity for the OpenShift master instances. Must be an odd number. A minimum of 3 is required.
    Type: String
    AllowedPattern: '^[3579]$|(^[3-9]+[3579]$)'
  NumberOfCompute:
    Default: '3'
    Description: The desired capacity for the OpenShift compute instances. Minimum of 3 nodes required. If the number of compute instances exceeds your Red Hat entitlement limits or AWS instance limits, the stack will fail. Choose a number that is within your limits.
    Type: Number
  ICPDDeploymentLogsBucketName:
    Description: 'The name of the S3 bucket where IBM Cloud Pak for Business Automation deployment logs are to be exported. The deployment logs provide a record of the boot strap scripting actions and are useful for problem determination if the deployment fails in some way.'
    Type: String


  DomainName:
    Description: 'Amazon Route 53 base domain configured for your OpenShift Container Platform cluster. Name must consist of lower case alphanumeric characters and must start and end with an alphanumeric character.'
    Type: String


  ClusterName:
    Description: Custom cluster name for kubernetes.io/cluster/tags. Can include lowercase letters (a-z), numbers (0-9), and dashes (-) and maximum of 21 characters.
    Type: String
    AllowedPattern: ^[0-9a-z-]{1,21}$
  OpenshiftVersion:
    Description: Choose Openshift Version.The Support is limited to the version set by default
    Type: String
    AllowedValues:
      - "4.12.30"
    Default: "4.12.30"
  OpenshiftUsername:
    Description: Username to be used to login to Openshift Console.
    Type: String
    Default: "ocadmin"
  OpenshiftPassword:
    Description: Password to be used to login to Openshift and Cloud Pak for Business Automation Console.
    Type: String
    NoEcho: 'true'


  EnableFips:
    Description: Enable FIPS for Openshift
    Type: String
    AllowedValues:
      - "false"
      - "true"
    Default: "false"

  PrivateCluster:
    Description: Choose true to deploy a private cluster. For details visit OpenShift documentation (https://docs.openshift.com/container-platform/4.10/installing/installing_aws/installing-aws-private.html)
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

 # Start here for cp4ba configuration

  SCDriversUrl:
    Description: >-
      This is necessary if you want to use your own JDBC drivers and/or need to provide ICCSAP drivers. If you are providing multiple JDBC drivers and ICCSAP drivers, all the files must be compressed in a single file.
      First you need to package your drivers into a compressed package in the format of "saplibs/drivers_files" and/or "jdbc/postgresql/driver_files". For example, if you are provding your own Postgres and ICCSAP drivers, then the compressed file should have the following structure and content
          /jdbc/postgresql/postgresql-8.0-310.jdbc3.jar
          /saplibs/libicudata.so.50
          /saplibs/...
      Then you need to put the compressed package on an annoymously accesible web server and provide the link here.
      The CR can handle .zip files using unzip as well as .tar, .tar.gz, .tar.bz2, .tar.xz. Does not handle .gz files, .bz2 files, .xz, or .zst files that do not contain a .tar archive.
    Type: String
    Default: ""

  SCDeploymentProfileSize:
    Description: Select the CP4BA deployment profile size.
    Type: String
    AllowedValues:
      - 'small'
      - 'medium'
      - 'large'
    Default: "small"

  SCFncmLicense:
    Description: Select the FileNet Content Manager (FNCM) license type.
    Type: String
    AllowedValues:
      - "non-production"
      - "production"
      - "user"
    Default: "non-production"

  SCBawLicense:
    Description: Select the Business Automation Workflow (BAW) license type.
    Type: String
    AllowedValues:
      - "non-production"
      - "production"
      - "user"
    Default: "non-production"

  SCCP4BALicense:
    Description: Select the CP4BA deployment license type.
    Type: String
    AllowedValues:
      - "non-production"
      - "production"
    Default: "non-production"

  SCDBServerPropertyFile:
    Description: Provide a S3 bucket path that contains the database server property files.  (e.g., s3://my-bucket/path/to/cp4ba_db_server.property )
    Type: String

  VPCPeering:
    Description: The ID of your VPC for peering
    Type: AWS::EC2::VPC::Id

  VPCPeeringRouteTable:
    Description: Enter all VPC route table IDs that are used by database server and active directory for VPC peering. Please enter IDs with comma seperated. (rtb-1234, rtb-5678)
    Type: String

  VPCPeeringCidrBlock:
    Description: Enter the VPC IPv4 CIDR that the database server is located in for VPC peering.
    Type: String

  DBPort:
    Description: Enter the database server port number to connect to
    Type: String
    Default: "5432"

  DBSecuritGroup:
    Description: Enter the default security group for your database server. (sg-1234)
    Type: String

  Patterns:
    Description: >-
      Select the Cloud Pak for Business Automation capability to install
    Type: List<String>
    AllowedValues:
      - FileNet Content Manager
      - Operational Decision Manager
      - Business Automation Workflow Runtime
      - Business Automation Workflow Authoring

  ContentOptionalComponents:
    Description: >-
      Enable or disable optional components for FileNet Content Manager (FNCM) for production deployment.
    Type: List<String>
    AllowedValues:
      - Business Automation Insights
      - Content Search Services
      - Content Management Interoperability Services
      - Task Manager
      - IBM Enterprise Records
      - IBM Content Collector for SAP
      - "-"
    Default: "-"
  ODMOptionalComponents:
    Description: >-
       Enable or disable optional components for Operational Decision Manager (ODM).
    Type: List<String>
    AllowedValues:
      - Decision Center
      - Decision Runner
      - Decision Server Runtime
      - Business Automation Insights
      - "-"
    Default: "-"
  BAWAuthoringOptionalComponents:
    Description: >-
       Enable or disable optional components for Business Automation Workflow Authoring.
    Type: List<String>
    AllowedValues:
      - Business Automation Insights
      - "-"
    Default: "-"
  BAWRuntimeOptionalComponents:
    Description: >-
       Enable or disable optional components for Business Automation Workflow Runtime.
    Type: List<String>
    AllowedValues:
      - Business Automation Insights
      - "-"
    Default: "-"

  ## Directory Service
  LdapConfigurationPropertyFile:
    Description: >-
      Provide a S3 bucket path that contains the Directory Server Service configuration property files.  (e.g., s3://my-bucket/path/to/cp4ba_LDAP.property)
    Type: String
  ## FNCM Configuration
  FNCMConfigurationPropertyFile:
    Description: >-
      Provide a S3 bucket path that contains the FileNet Content Mananger configuration property files.  (e.g., s3://my-bucket/path/to/content.property)
    Type: String
  FNCMDBNameAndUserPropertyFile:
    Description: >-
      Provide a S3 bucket path that contains the FileNet Content Mananger database db and username property files.  (e.g., s3://my-bucket/path/to/cp4ba_db_name_user_content.property)
    Type: String

  ## ODM Configuration
  ODMConfigurationPropertyFile:
    Description: >-
      Provide a S3 bucket path that contains the Operational Decisions Manager configuration property files.  (e.g., s3://my-bucket/path/to/odm.property)
    Type: String
  ODMDBNameAndUserPropertyFile:
    Description: >-
      Provide a S3 bucket path that contains the Operational Decisions Manager database db and username property files.  (e.g., s3://my-bucket/path/to/cp4ba_db_name_user_odm.property)
    Type: String

  ## ODM Configuration
  BAWConfigurationPropertyFile:
    Description: >-
      Provide a S3 bucket path that contains the Business Automation Workflow configuration property files.  (e.g., s3://my-bucket/path/to/baw.property)
    Type: String
  BAWDBNameAndUserPropertyFile:
    Description: >-
      Provide a S3 bucket path that contains the Business Automation Workflow database db and username property files.  (e.g., s3://my-bucket/path/to/cp4ba_db_name_user_baw_runtime.property or cp4ba_db_name_user_baw_authoring.property )
    Type: String


Mappings:

  AWSAMIRegionMap:
    us-east-1:
      BootNodeAmiId: ami-03097f1135b3efd06
    af-south-1:
      BootNodeAmiId: ami-01c6263caf782e4b8
    ap-east-1:
      BootNodeAmiId: ami-01540d0b1a8b63dc2
    ap-northeast-1:
      BootNodeAmiId: ami-0f026bd8fb28f8fb6
    ap-northeast-2:
      BootNodeAmiId: ami-091d9580ee0f55bab
    ap-south-1:
      BootNodeAmiId: ami-0c511f695d5c1312c
    ap-southeast-1:
      BootNodeAmiId: ami-0a58a9f869c677b53
    ap-southeast-2:
      BootNodeAmiId: ami-07a0bf5cbe4e68d87
    ca-central-1:
      BootNodeAmiId: ami-026c7d1c371e31d87
    eu-central-1:
      BootNodeAmiId: ami-0812c9a182f01cad6
    eu-north-1:
      BootNodeAmiId: ami-096ec85aca0789fcc
    eu-south-1:
      BootNodeAmiId: ami-0e0e9c8193ba46d4e
    eu-west-1:
      BootNodeAmiId: ami-013891978bcf167a3
    eu-west-2:
      BootNodeAmiId: ami-04ce6570af3f361c9
    eu-west-3:
      BootNodeAmiId: ami-033a783c48c753ffd
    sa-east-1:
      BootNodeAmiId: ami-03aa90d22065dba3d
    us-east-2:
      BootNodeAmiId: ami-008608b8cc732b081
    us-west-1:
      BootNodeAmiId: ami-0718ab368a13aa859
    us-west-2:
      BootNodeAmiId: ami-0ab6c20d218729102


Rules:

  LicenseAgreementRule:
    Assertions:
    - Assert:
        Fn::Contains:
        - - Accept
        - Ref: LicenseAgreement
      AssertDescription: User must agree to the terms of the license agreement.

  EmptyValues:
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref OpenshiftUsername
            - ''
        AssertDescription: Openshift Username cannot be empty string
      - Assert: !Not
          - !Equals
            - !Ref APIKey
            - ''
        AssertDescription: Entitlement Key cannot be empty string
      - Assert: !Not
          - !Equals
            - !Ref RedhatPullSecret
            - ''
        AssertDescription: Red hat Pull Secret cannot be empty string.
      - Assert: !Not
          - !Equals
            - !Ref ClusterName
            - ''
        AssertDescription: Cluster Name cannot be empty string
      - Assert: !Not
          - !Equals
            - !Ref  DomainName
            - ''
        AssertDescription: Domain Name cannot be empty string
Conditions:
  3AZCondition: !Equals [!Ref NumberOfAZs, 3]

Resources:

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cp4ba-aws-marketplace.s3.amazonaws.com/BRANCH_NAME/aws-vpc.template.yaml
      Parameters:
        AvailabilityZones: !Join [ ',', !Ref 'AvailabilityZones']
        NumberOfAZs: !Ref  NumberOfAZs
        PrivateSubnet1ACIDR: !Ref 'PrivateSubnet1CIDR'
        PrivateSubnet2ACIDR: !Ref 'PrivateSubnet2CIDR'
        PrivateSubnet3ACIDR: !Ref 'PrivateSubnet3CIDR'
        PrivateSubnetATag2: !Sub "kubernetes.io/cluster/${AWS::StackName}-${AWS::Region}=owned"
        PrivateSubnetATag3: "kubernetes.io/role/internal-elb=owned"
        PublicSubnet1CIDR: !Ref 'PublicSubnet1CIDR'
        PublicSubnet2CIDR: !Ref 'PublicSubnet2CIDR'
        PublicSubnet3CIDR: !Ref 'PublicSubnet3CIDR'
        PublicSubnetTag2: !Sub "kubernetes.io/cluster/${AWS::StackName}-${AWS::Region}=owned"
        PublicSubnetTag3: "kubernetes.io/role/elb=owned"
        VPCCIDR: !Ref 'VPCCIDR'


  RDSStackTasks:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cp4ba-aws-marketplace.s3.amazonaws.com/BRANCH_NAME/ibm-cloudpak-business-automation-rds-tasks.yaml
      Parameters:
        VPCID: !GetAtt 'VPCStack.Outputs.VPCID'
        NumberOfAZs: !Ref  'NumberOfAZs'
        VPCPeering: !Ref 'VPCPeering'
        VPCPeeringCidrBlock: !Ref 'VPCPeeringCidrBlock'
        PrivateSubnet1ARouteTableId:  !GetAtt 'VPCStack.Outputs.PrivateSubnet1ARouteTable'
        PrivateSubnet2ARouteTableId:  !If
          - 3AZCondition
          - !GetAtt 'VPCStack.Outputs.PrivateSubnet2ARouteTable'
          - ""
        PrivateSubnet3ARouteTableId:  !If
          - 3AZCondition
          - !GetAtt 'VPCStack.Outputs.PrivateSubnet3ARouteTable'
          - ""
        ## Public  PublicSubnetRouteTable
        PublicSubnetRouteTable:  !GetAtt 'VPCStack.Outputs.PublicSubnetRouteTable'

  CPBAIAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CPBAIAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref CPBAIAMUser


  CPBASecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub '{"apikey":"${APIKey}", "password":"${OpenshiftPassword}", "username":"admin"}'
  OpenshiftSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub '{"ocpUsername":"${OpenshiftUsername}", "ocpPassword":"${OpenshiftPassword}"}'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: lambda-cleanUpLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:PutParameter
                  - ssm:GetParameter
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*_CleanupStatus'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'

  BootNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Policies:
      - PolicyName: bootnode-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "ec2:Describe*"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:AttachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:DetachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:UpdateSecret"
            Resource:
            - !Ref CPBASecret
            - !Ref AWSCredentialSecret
            - !Ref OpenshiftSecret
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: !Sub arn:aws:s3:::${ICPDDeploymentLogsBucketName}
          - Effect: "Allow"
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${ICPDDeploymentLogsBucketName}/*
          - Effect: Allow
            Action:
            - ssm:SendCommand
            - ssm:PutParameter
            - ssm:GetParameter
            Resource:
            - '*'


  OpenshiftURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${AWS::StackName}-OpenshiftURL"
      Type: String
      Value: !Sub "https://console-openshift-console.apps.${ClusterName}.${DomainName}"

  CPDURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${AWS::StackName}-CPDURL"
      Type: String
      Value: !Sub "https://cpd-cp4ba.apps.${ClusterName}.${DomainName}"

  BootnodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - Ref: "BootNodeIamRole"

  BootnodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster Bootnode Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BootNodeAccessCIDR
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: !Ref DBPort
        ToPort: !Ref DBPort
        DestinationSecurityGroupId: !Ref DBSecuritGroup
        Description: "Allow bootnode to communicate with db instance"
      VpcId: !GetAtt 'VPCStack.Outputs.VPCID'

  DBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DBSecuritGroup
      Description: "Allow communication from bootnode"
      FromPort: !Ref DBPort
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt BootnodeSecurityGroup.GroupId
      ToPort: !Ref DBPort

  AWSCredentialSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub
        - '{"aws_secret_access_key":"${CPBAIAMUserAccessKey}, "aws_access_key_id":"${CPBAIAMUserSecret}"}'
        - {CPBAIAMUserAccessKey: !Ref CPBAIAMUserAccessKey, CPBAIAMUserSecret: !GetAtt [CPBAIAMUserAccessKey, SecretAccessKey]}

  BootnodeInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Required:
            - StackPropertiesFile

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                AWS_REGION=${AWS::Region}
                AWS_STACKID="${AWS::StackId}"
                AWS_STACKNAME="${AWS::StackName}"

            /home/ec2-user/destroy.sh:
              content: |
                echo "$1 - Destroy"
                cd /home/ec2-user/cp4ba-deployment/selfmanaged-openshift/aws/
                sudo terraform destroy --var-file=terraform_vars.tfvars --auto-approve | tee terraform_destroy.log
                aws ssm put-parameter --name $1"_CleanupStatus" --type "String" --value "READY" --overwrite

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

            /root/.aws/credentials:
              content:
                !Sub
                - |
                  [default]
                  aws_access_key_id=${CPBAIAMUserAccessKey}
                  aws_secret_access_key=${CPBAIAMUserSecret}
                -
                  CPBAIAMUserAccessKey: !Ref CPBAIAMUserAccessKey
                  CPBAIAMUserSecret: !GetAtt [CPBAIAMUserAccessKey, SecretAccessKey]

    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", BootNodeAmiId]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      IamInstanceProfile: !Ref BootnodeInstanceProfile
      Tags:
        - Key: Name
          Value:
            !Sub
            - "${ClusterName}-bootnode"
            - ClusterName: !Ref ClusterName
      InstanceType: i3.large
      NetworkInterfaces:
      - GroupSet:
        - !Ref BootnodeSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: '0'
        DeleteOnTermination: true
        SubnetId: !GetAtt 'VPCStack.Outputs.PublicSubnet1ID'
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash -x
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            sed -i "s/aws-cfn-bootstrap-latest.tar.gz/aws-cfn-bootstrap-py3-latest.tar.gz/g" /quickstart-linux-utilities/quickstart-cfn-tools.source
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P

            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err "cfn bootstrap failed"
            pip3 install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource BootnodeInstance --configsets Required --region ${AWS::Region}

            cd /tmp
            qs_retry_command 10 wget https://s3-us-west-1.amazonaws.com/amazon-ssm-us-west-1/latest/linux_amd64/amazon-ssm-agent.rpm
            qs_retry_command 10 yum install -y ./amazon-ssm-agent.rpm
            systemctl start amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            rm -f ./amazon-ssm-agent.rpm

            export ICPDInstallationCompletedURL='${ICPDInstallationCompletedHandle}'
            export AWS_REGION=${AWS::Region}
            export AWS_STACKID=${AWS::StackId}
            export AWS_STACKNAME=${AWS::StackName}

            chmod +x /home/ec2-user/destroy.sh

            ssh-keygen -t rsa -b 4096 -f /home/ec2-user/.ssh/id_rsa -q -N ""


            cd /home/ec2-user/cp4ba-deployment/selfmanaged-openshift/aws
            export HOME=~

            aws s3 cp ${RedhatPullSecret} ./pull-secret
            export TF_VAR_openshift_pull_secret_file_path='./pull-secret'
            export TF_VAR_access_key_id=${CPBAIAMUserAccessKey}
            export TF_VAR_secret_access_key=${CPBAIAMUserSecret}
            export TF_VAR_region=${AWS::Region}
            export TF_VAR_az=${AZ}
            export TF_VAR_private_cluster=${PrivateCluster}
            export TF_VAR_public_ssh_key=`cat /home/ec2-user/.ssh/id_rsa.pub`
            export TF_VAR_base_domain=${DomainName}
            export TF_VAR_cluster_name=${ClusterName}
            export TF_VAR_openshift_version='${OpenshiftVersion}'
            export TF_VAR_openshift_username='${OpenshiftUsername}'
            export TF_VAR_openshift_password='${OpenshiftPassword}'
            export TF_VAR_cpd_external_username='cp'
            export TF_VAR_cpd_api_key='${APIKey}'
            export TF_VAR_accept_cpd_license='reject'

            export TF_VAR_watson_knowledge_catalog='no'
            export TF_VAR_cognos_dashboard_embedded='no'
            export TF_VAR_watson_ai_openscale='no'
            export TF_VAR_watson_studio='no'
            export TF_VAR_analytics_engine='no'
            export TF_VAR_watson_machine_learning='no'
            export TF_VAR_data_virtualization='no'


            export TF_VAR_new_or_existing_vpc_subnet="exist"
            export TF_VAR_vpc_id='${VPCID}'
            export TF_VAR_master_subnet1_id='${PublicSubnet1ID}'
            export TF_VAR_master_subnet2_id='${PublicSubnet2ID}'
            export TF_VAR_master_subnet3_id='${PublicSubnet3ID}'
            export TF_VAR_worker_subnet1_id='${PrivateSubnet1ID}'
            export TF_VAR_worker_subnet2_id='${PrivateSubnet2ID}'
            export TF_VAR_worker_subnet3_id='${PrivateSubnet3ID}'
            export TF_VAR_vpc_cidr='${VPCCIDR}'
            export TF_VAR_availability_zone1='${AvailabilityZone1}'
            export TF_VAR_availability_zone2='${AvailabilityZone2}'
            export TF_VAR_availability_zone3='${AvailabilityZone3}'

            export TF_VAR_cpd_namespace=cp4ba
            export TF_VAR_enable_fips=${EnableFips}
            export TF_VAR_master_instance_type=${MasterInstanceType}
            export TF_VAR_master_replica_count=${NumberOfMaster}
            export TF_VAR_worker_instance_type=${ComputeInstanceType}
            export TF_VAR_worker_replica_count=${NumberOfCompute}
            export TF_VAR_cluster_network_cidr=${ClusterNetworkCIDR}

            export TF_VAR_cpd_version=
            export TF_VAR_storage_option='ocs'
            export TF_VAR_db_security_group=${DBSecuritGroup}
            export TF_VAR_db_port=${DBPort}

            for rtb in $(echo ${VPCPeeringRouteTable} | sed "s/,/ /g"); do rtb_new="$rtb_new, \"$rtb\""; done
            export NewVPCPeeringRouteTable=$(echo $rtb_new | cut -c 3-)
            export TF_VAR_vpc_peering_route_table=[$NewVPCPeeringRouteTable]
            export TF_VAR_vpc_peering_id=${VpcPeeringId}

            export TF_VAR_ocs='{enable = "true", ami_id = "", ami_most_recent="true", ami_owner="531415883065", ami_name_filter="rhcos-412.86*x86_64", dedicated_node_instance_type = "${OCSInstanceType}" }'

            echo "Creating terraform variables file"

            echo "openshift_pull_secret_file_path=\"./pull-secret\"" > terraform_vars.tfvars
            echo "db_port=\"${DBPort}\"" >> terraform_vars.tfvars
            echo "db_security_group=\"${DBSecuritGroup}\"" >> terraform_vars.tfvars
            echo "vpc_peering_route_table=[$NewVPCPeeringRouteTable]" >> terraform_vars.tfvars
            echo "vpc_peering_id=\"${VpcPeeringId}\"" >> terraform_vars.tfvars

            echo "access_key_id=\"${CPBAIAMUserAccessKey}\"" >> terraform_vars.tfvars
            echo "secret_access_key=\"${CPBAIAMUserSecret}\"" >> terraform_vars.tfvars
            echo "region=\"${AWS::Region}\"" >> terraform_vars.tfvars
            echo "az=\"${AZ}\"" >> terraform_vars.tfvars
            echo "private_cluster=\"${PrivateCluster}\"" >> terraform_vars.tfvars
            echo "public_ssh_key=\"`cat /home/ec2-user/.ssh/id_rsa.pub`\"" >> terraform_vars.tfvars
            echo "base_domain=\"${DomainName}\"" >> terraform_vars.tfvars
            echo "cluster_name=\"${ClusterName}\"" >> terraform_vars.tfvars
            echo "openshift_version=\"${OpenshiftVersion}\"" >> terraform_vars.tfvars
            echo "openshift_username=\"${OpenshiftUsername}\"" >> terraform_vars.tfvars
            echo "openshift_password=\"${OpenshiftPassword}\"" >> terraform_vars.tfvars
            echo "cpd_external_username=\"cp\"" >> terraform_vars.tfvars
            echo "cpd_api_key=\"${APIKey}\"" >> terraform_vars.tfvars
            echo "accept_cpd_license=\"reject\"" >> terraform_vars.tfvars

            echo "watson_knowledge_catalog=\"no\"" >> terraform_vars.tfvars
            echo "cognos_dashboard_embedded=\"no\"" >> terraform_vars.tfvars
            echo "watson_ai_openscale=\"no\"" >> terraform_vars.tfvars
            echo "watson_studio=\"no\"" >> terraform_vars.tfvars
            echo "analytics_engine=\"no\"" >> terraform_vars.tfvars
            echo "watson_machine_learning=\"no\"" >> terraform_vars.tfvars
            echo "data_virtualization=\"no\"" >> terraform_vars.tfvars


            echo "new_or_existing_vpc_subnet=\"exist\"" >> terraform_vars.tfvars
            echo "vpc_id=\"${VPCID}\"" >> terraform_vars.tfvars
            echo "master_subnet1_id=\"${PublicSubnet1ID}\"" >> terraform_vars.tfvars
            echo "master_subnet2_id=\"${PublicSubnet2ID}\"" >> terraform_vars.tfvars
            echo "master_subnet3_id=\"${PublicSubnet3ID}\"" >> terraform_vars.tfvars
            echo "worker_subnet1_id=\"${PrivateSubnet1ID}\"" >> terraform_vars.tfvars
            echo "worker_subnet2_id=\"${PrivateSubnet2ID}\"" >> terraform_vars.tfvars
            echo "worker_subnet3_id=\"${PrivateSubnet3ID}\"" >> terraform_vars.tfvars
            echo "vpc_cidr=\"${VPCCIDR}\"" >> terraform_vars.tfvars
            echo "availability_zone1=\"${AvailabilityZone1}\"" >> terraform_vars.tfvars
            echo "availability_zone2=\"${AvailabilityZone2}\"" >> terraform_vars.tfvars
            echo "availability_zone3=\"${AvailabilityZone3}\"" >> terraform_vars.tfvars

            echo "cpd_namespace=\"cp4ba\"" >> terraform_vars.tfvars
            echo "enable_fips=\"${EnableFips}\"" >> terraform_vars.tfvars
            echo "master_instance_type=\"${MasterInstanceType}\"" >> terraform_vars.tfvars
            echo "master_replica_count=${NumberOfMaster}" >> terraform_vars.tfvars
            echo "worker_instance_type=\"${ComputeInstanceType}\"" >> terraform_vars.tfvars
            echo "worker_replica_count=${NumberOfCompute}" >> terraform_vars.tfvars
            echo "cluster_network_cidr=\"${ClusterNetworkCIDR}\"" >> terraform_vars.tfvars
            ehco "enable_autoscaler=true" >> terraform_vars.tfvars

            echo "cpd_version=\"\"" >> terraform_vars.tfvars
            echo "storage_option=\"ocs\"" >> terraform_vars.tfvars

            echo "ocs={\"enable\" = \"true\", \"ami_id\" = \"\", \"ami_most_recent\" = \"true\", \"ami_owner\" = \"531415883065\", \"ami_name_filter\" = \"rhcos-412.86*x86_64\", \"dedicated_node_instance_type\" = \"${OCSInstanceType}\"}" >> terraform_vars.tfvars

            echo "enable_permission_quota_check=\"false\"" >> terraform_vars.tfvars
            export TF_VAR_enable_permission_quota_check=false
            export TF_LOG=DEBUG
            export TF_LOG_PATH=/home/ec2-user/cp4ba-deployment/selfmanaged-openshift/aws/.trace.log
            terraform init -input=false
            terraform plan -out=tfplan -input=false
            terraform apply -input=false tfplan
            ecode=$?


            # Starting
            export CP4BA_AUTO_PLATFORM="OCP"
            export CP4BA_AUTO_DEPLOYMENT_TYPE="production"
            export CP4BA_DEPLOYMENT_TYPE="production"
            export CONTENT_CR_EXISTS="no"
            export CP4BA_LICENSE_ACCEPT="${LicenseAgreement}"
            export PROFILE_TYPE=${SCDeploymentProfileSize}
            export CP4BA_AUTO_NAMESPACE="cp4ba"
            export CP4BA_AUTO_CLUSTER_USER="${OpenshiftUsername}"
            export CP4BA_AUTO_ALL_NAMESPACES="No"
            export CP4BA_AUTO_STORAGE_CLASS_OCP="ocs-storagecluster-cephfs"
            export CP4BA_AUTO_ENTITLEMENT_KEY="${APIKey}"
            export CP4BA_LICENSE="${SCCP4BALicense}"
            export FNCM_LICENSE="${SCFncmLicense}"
            export BAW_LICENSE="${SCBawLicense}"
            export CP4BA_JDBC_URL="${SCDriversUrl}"
            export FNCM_CONFIG_PROP_FILE="${FNCMConfigurationPropertyFile}"
            export FNCM_DB_PROP_FILE="${FNCMDBNameAndUserPropertyFile}"
            export ODM_CONFIG_PROP_FILE="${ODMConfigurationPropertyFile}"
            export ODM_DB_PROP_FILE="${ODMDBNameAndUserPropertyFile}"
            export BAW_CONFIG_PROP_FILE="${BAWConfigurationPropertyFile}"
            export BAW_DB_PROP_FILE="${BAWDBNameAndUserPropertyFile}"

            export DB_SERVER_PROP_FILE="${SCDBServerPropertyFile}"
            export LDAP_CONFIG_PROP_FILE="${LdapConfigurationPropertyFile}"
            export OPTIONAL_COMP_SELECTED="${BAWRuntimeOptionalString},${BAWAuthoringOptionalString},${ContentOptionalString},${ODMOptionalString}"
            export PATTERN_STRING_SELECTED="${PatternString}"
            export CP4BA_SKIP_SUMMARY="Yes"
            export USE_DEFAULT_IAM_ADMIN=No
            export NON_DEFAULT_IAM_ADMIN=iamadmin

            cd /home/ec2-user/cert-kubernetes/scripts
            cp /home/ec2-user/cp4ba-deployment/selfmanaged-openshift/aws/scripts/aws_user_data_generate_silent_install.sh ./
            cp /home/ec2-user/cp4ba-deployment/selfmanaged-openshift/aws/scripts/platform_auth_idp_credentials.yaml ./
            cp /home/ec2-user/cp4ba-deployment/selfmanaged-openshift/aws/scripts/iam_oidc_admin_role_binding.yaml ./
            chmod +x ./aws_user_data_generate_silent_install.sh  ./platform_auth_idp_credentials.yaml ./iam_oidc_admin_role_binding.yaml
            ./aws_user_data_generate_silent_install.sh
            ecode=$?

            aws s3 cp /home/ec2-user/cp4ba-deployment/selfmanaged-openshift/aws/.trace.log s3://${ICPDDeploymentLogsBucketName}/cp4ba-trace.log
            aws s3 cp /var/log/cloud-init-output.log s3://${ICPDDeploymentLogsBucketName}/cp4ba-bootstrap.log

            cp -rf ~/.kube/ /home/ec2-user/

            chown -R ec2-user:ec2-user /home/ec2-user/.kube

            /usr/local/bin/cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at ${ICPDDeploymentLogsBucketName}/cp4ba-bootstrap.log" $ICPDInstallationCompletedURL
          -
            CPBAIAMUserAccessKey: !Ref CPBAIAMUserAccessKey
            CPBAIAMUserSecret: !GetAtt [CPBAIAMUserAccessKey, SecretAccessKey]
            AZ: !If [ 3AZCondition , 'multi_zone', 'single_zone']
            AvailabilityZone1: !Select [0, !Ref AvailabilityZones]
            AvailabilityZone2: !If [ 3AZCondition, !Select [1, !Ref AvailabilityZones], ""]
            AvailabilityZone3: !If [ 3AZCondition, !Select [2, !Ref AvailabilityZones], ""]
            PatternString: !Join [',', !Ref 'Patterns']
            ODMOptionalString: !Join [',', !Ref 'ODMOptionalComponents']
            ContentOptionalString: !Join [',', !Ref 'ContentOptionalComponents']
            BAWAuthoringOptionalString: !Join [',', !Ref 'BAWAuthoringOptionalComponents']
            BAWRuntimeOptionalString: !Join [',', !Ref 'BAWRuntimeOptionalComponents']
            PrivateSubnet1ID: !GetAtt 'VPCStack.Outputs.PrivateSubnet1AID'
            VPCID: !GetAtt 'VPCStack.Outputs.VPCID'
            VpcPeeringId: !GetAtt 'RDSStackTasks.Outputs.VpcPeeringId'
            PrivateSubnet2ID: !If
              - 3AZCondition
              - !GetAtt 'VPCStack.Outputs.PrivateSubnet2AID'
              - ""
            PrivateSubnet3ID: !If
              - 3AZCondition
              - !GetAtt 'VPCStack.Outputs.PrivateSubnet3AID'
              - ""
            PublicSubnet1ID: !GetAtt 'VPCStack.Outputs.PublicSubnet1ID'
            PublicSubnet2ID: !If
              - 3AZCondition
              - !GetAtt 'VPCStack.Outputs.PublicSubnet2ID'
              - ""
            PublicSubnet3ID: !If
              - 3AZCondition
              - !GetAtt 'VPCStack.Outputs.PublicSubnet3ID'
              - ""

  CleanUpLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import os
          import traceback
          import time
          def handler(event, context):
              responseData = {}
              try:
                  print("event_obj:",json.dumps(event))
                  print(event['RequestType'])
                  if event['RequestType'] == 'Delete':
                    print("Run unsubscribe script")
                    ssm = boto3.client('ssm',region_name=os.environ['Region'])
                    instanceID = os.environ['BootNode']
                    storage = os.environ['Storage']
                    stackname = os.environ['StackName']
                    print(instanceID)
                    response = ssm.send_command(Targets=[{"Key":"instanceids","Values":[instanceID]}],
                            DocumentName="AWS-RunShellScript",
                            Parameters={"commands":["/home/ec2-user/destroy.sh %s" %(stackname)],
                                        "executionTimeout":["1200"],
                                        "workingDirectory":["/home/ec2-user"]},
                            Comment="Execute script in uninstall openshift",
                            TimeoutSeconds=120)
                    print(response)
                    current_status = "WAIT"
                    final_status = "READY"
                    parameterName = stackname+"_CleanupStatus"
                    response = ssm.put_parameter(Name=parameterName,
                           Description="Waiting for CleanupStatus to be READY",
                           Value=current_status,
                           Type='String',
                           Overwrite=True)
                    print(response)
                    while(current_status!=final_status):
                      time.sleep(30)
                      response = ssm.get_parameter(Name=parameterName)
                      parameter = response.get('Parameter')
                      current_status = parameter.get('Value')
                      print(current_status)
                    ssm.delete_parameter(Name=parameterName)
              except Exception as e:
                print(e)
                traceback.print_exc()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
      Environment:
        Variables:
          Region: !Ref AWS::Region
          BootNode: !Ref BootnodeInstance
          Storage: 'ocs'
          StackName: !Ref AWS::StackName
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 600

  Cleanup :
    Type: Custom::Cleanup
    Properties:
      DependsOn: BootnodeInstance
      ServiceToken: !GetAtt 'CleanUpLambda.Arn'

  ICPDInstallationCompletedHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  ICPDInstallationCompleted:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref ICPDInstallationCompletedHandle
      Timeout: '30000'

Outputs:
  BootnodeInstanceId:
    Description: Bootnode Instance ID.
    Value: !Ref BootnodeInstance

  BootnodePublicIp:
    Description: The boot node public IP address.
    Value: !GetAtt BootnodeInstance.PublicIp

  OpenshiftURLValue:
    Description: The URL for the OpenShift UI.
    Value: !GetAtt OpenshiftURL.Value

  ICPBAWebClientPassword :
    Description: CloudPak for Business Automation web client Password.
    Value: !Ref CPBASecret

  OpenshiftUsername:
    Description: OpenShift username secret.
    Value: !Ref OpenshiftUsername

  OpenshiftPassword:
    Description: OpenShift password secret.
    Value: !Ref OpenshiftSecret
